#include <iostream>

using namespace std;

void exchange(double &u,double &v){
  double t;
  t = u;
  u = v;
  v = t;
}
double timetaken(int i ,int n,double pos[],double vel[]){
     double timei;
    if((vel[i]>0&&vel[i+1]<=0)||(vel[i]>=0&&vel[i+1]<0)){
         timei = (pos[i+1]-pos[i]-2)/(vel[i]-vel[i+1]);
   }
    else if((vel[i]*vel[i+1]>=0)&&(vel[i]>vel[i+1])){
      timei = (pos[i+1]-pos[i]-2)/(vel[i]-vel[i+1]);
    }
   else timei = 10000;
   return timei;
}
int minimum(int n,double A[]){
   int  mintime = A[0];
    int index;
 for(int i=0;i<n;i++){
    if(mintime>A[i]){
        mintime = A[i];
        index  = i;
    }
 }
 return index;
}
void collision(int n,double pos[],double vel[]){
    double time[n-1];
    for(int j=0;j<(n-1);j++){
        time[j] = timetaken(j,n,pos,vel);
    }
        int i = minimum((n-1),time);
        int k = 0;
        int sum=0;

    while(time[i]!=10000){
    for(int l=0;l<n;l++){
        pos[l] = pos[l] + vel[l]*time[i];
    }
    sum = sum+time[i];
        k++;
    exchange(vel[i],vel[i+1]);
    i = minimum((n-1),time);
    }
    if(time[i]==10000){
        cout<<k<<endl;
       cout<<sum<<endl;
       for(int j=0;j<n;j++){
        cout<<pos[i]<<" "<<vel[i]<<endl;
    }

    }
}
int main(){
  int n;
  cin>>n;
  double pos[n];
  double vel[n];
  for(int i=0;i<n;i++){
    cin>>pos[i]>>vel[i];
  }
  collision(n,pos,vel);
}

